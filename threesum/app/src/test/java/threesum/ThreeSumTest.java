/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package threesum;

import org.junit.Test;
import static org.junit.Assert.*;

public class ThreeSumTest {
        @Test
        public void testCubic() {
                assertNull(ThreeSum.threeSumCubic(
                                new int[] { 1, 2, 3 }));
                assertNull(ThreeSum.threeSumCubic(
                                new int[] { 1, 2 }));
                assertNull(ThreeSum.threeSumCubic(
                                new int[] {}));
                assertNull(ThreeSum.threeSumCubic(
                                new int[] { 2, 2, 2 }));
                assertNull(ThreeSum.threeSumCubic(
                                new int[] { 1, 2, 3, 4, 5, 6, 8, 9, 7, 4, 5 }));
                assertNotNull(ThreeSum.threeSumCubic(
                                new int[] { 1, 2, -3 }));
                assertNotNull(ThreeSum.threeSumCubic(
                                new int[] { 0, 0, 0 }));
                assertNotNull(ThreeSum.threeSumCubic(
                                new int[] { 1, 2, -3, -4, 3, 1 }));
                assertNotNull(ThreeSum.threeSumCubic(
                                new int[] { 1, 2, -3 }));
                assertNotNull(ThreeSum.threeSumCubic(
                                new int[] { 1, 1, -2 }));
                assertArrayEquals(new int[] { 1, 2, -3 },
                                ThreeSum.threeSumCubic(
                                                new int[] { 1, 2, -3 }));
                assertArrayEquals(new int[] { 1, 2, -3 },
                                ThreeSum.threeSumCubic(
                                                new int[] { 1, 2, -3, 5, 6, 7 }));
                assertArrayEquals(new int[] { 0, 0, 0 },
                                ThreeSum.threeSumCubic(
                                                new int[] { 0, 0, 0, 5, 4, 8 }));
                assertArrayEquals(new int[] { -3, -4, 7 },
                                ThreeSum.threeSumCubic(
                                                new int[] { -3, -4, 7, 8, -6, -2, 5, 25, 32 }));
                assertArrayEquals(new int[] { 8, -6, -2 },
                                ThreeSum.threeSumCubic(
                                                new int[] { 8, -3, -4, 7, 8, -6, -2, 5, 25, 32 }));

        }

        @Test
        public void testQuadratic() {
                assertNull(ThreeSum.threeSumQuadratic(
                                new int[] { 1, 2, 3 }));
                assertNull(ThreeSum.threeSumQuadratic(
                                new int[] { 1, 2 }));
                assertNull(ThreeSum.threeSumQuadratic(
                                new int[] {}));
                assertNull(ThreeSum.threeSumQuadratic(
                                new int[] { 2, 2, 2 }));
                assertNull(ThreeSum.threeSumQuadratic(
                                new int[] { 1, 2, 3, 4, 5, 6, 8, 9, 7, 4, 5 }));
                assertNotNull(ThreeSum.threeSumQuadratic(
                                new int[] { 1, 2, -3 }));
                assertNotNull(ThreeSum.threeSumQuadratic(
                                new int[] { 0, 0, 0 }));
                assertNotNull(ThreeSum.threeSumQuadratic(
                                new int[] { 1, 2, -3, -4, 3, 1 }));
                assertNotNull(ThreeSum.threeSumQuadratic(
                                new int[] { 1, 2, -3 }));
                assertNotNull(ThreeSum.threeSumQuadratic(
                                new int[] { 1, 1, -2 }));
                assertArrayEquals(new int[] { -3, 1, 2 },
                                ThreeSum.threeSumQuadratic(
                                                new int[] { 1, 2, -3 }));
                assertArrayEquals(new int[] { -3, 1, 2 },
                                ThreeSum.threeSumQuadratic(
                                                new int[] { 1, 2, -3, 5, 6, 7 }));
                assertArrayEquals(new int[] { 0, 0, 0 },
                                ThreeSum.threeSumQuadratic(
                                                new int[] { 0, 0, 0, 5, 4, 8 }));
                assertArrayEquals(new int[] { -6, -2, 8 },
                                ThreeSum.threeSumQuadratic(
                                                new int[] { -3, -4, 7, 8, -6, -2, 5, 25, 32 }));
                assertArrayEquals(new int[] { -6, -2, 8 },
                                ThreeSum.threeSumQuadratic(
                                                new int[] { 8, -3, -4, 7, 8, -6, -2, 5, 25, 32 }));

        }

        @Test
        public void testHashMap() {
                assertNull(ThreeSum.threeSumHashMap(
                                new int[] { 1, 2, 3 }));
                assertNull(ThreeSum.threeSumHashMap(
                                new int[] { 1, 2 }));
                assertNull(ThreeSum.threeSumHashMap(
                                new int[] {}));
                assertNull(ThreeSum.threeSumHashMap(
                                new int[] { 2, 2, 2 }));
                assertNull(ThreeSum.threeSumHashMap(
                                new int[] { 1, 2, 3, 4, 5, 6, 8, 9, 7, 4, 5 }));
                assertNotNull(ThreeSum.threeSumHashMap(
                                new int[] { 1, 2, -3 }));
                assertNotNull(ThreeSum.threeSumHashMap(
                                new int[] { 0, 0, 0 }));
                assertNotNull(ThreeSum.threeSumHashMap(
                                new int[] { 1, 2, -3, -4, 3, 1 }));
                assertNotNull(ThreeSum.threeSumHashMap(
                                new int[] { 1, 2, -3 }));
                assertNotNull(ThreeSum.threeSumHashMap(
                                new int[] { 1, 1, -2 }));
                assertArrayEquals(new int[] { 1, 2, -3 },
                                ThreeSum.threeSumHashMap(
                                                new int[] { 1, 2, -3 }));
                assertArrayEquals(new int[] { 1, 2, -3 },
                                ThreeSum.threeSumHashMap(
                                                new int[] { 1, 2, -3, 5, 6, 7 }));
                assertArrayEquals(new int[] { 0, 0, 0 },
                                ThreeSum.threeSumHashMap(
                                                new int[] { 0, 0, 0, 5, 4, 8 }));
                assertArrayEquals(new int[] { -3, -4, 7 },
                                ThreeSum.threeSumHashMap(
                                                new int[] { -3, -4, 7, 8, -6, -2, 5, 25, 32 }));
                assertArrayEquals(new int[] { 8, -6, -2 },
                                ThreeSum.threeSumHashMap(
                                                new int[] { 8, -3, -4, 7, 8, -6, -2, 5, 25, 32 }));
        }

        @Test
        public void testHashMapAlt() {
                assertNull(ThreeSum.threeSumHashMapAlternative(
                                new int[] { 1, 2, 3 }));
                assertNull(ThreeSum.threeSumHashMapAlternative(
                                new int[] { 0 }));
                // Should give null but test passes while it should not
                assertNotNull(ThreeSum.threeSumHashMapAlternative(
                                new int[] { 0, 0 }));
                // Should not pass because the array has only two elements
                assertArrayEquals(new int[] { -1, 2, -1 },
                                ThreeSum.threeSumHashMapAlternative(
                                                new int[] { -1, 2 }));
                assertArrayEquals(new int[] { -1, 2, -1 },
                                ThreeSum.threeSumHashMapAlternative(
                                                new int[] { -1, 2, 500, 666 }));
                assertArrayEquals(new int[] { -1, 2, -1 },
                                ThreeSum.threeSumHashMapAlternative(
                                                new int[] { -1, 500, 666, 2 }));

        }

}
